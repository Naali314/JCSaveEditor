package jadecocoonwiki.saveeditor.saveeditor.levantstats;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import jadecocoonwiki.saveeditor.helper.FormatterProvider;
import jadecocoonwiki.saveeditor.model.creature.LevantStats;

import javax.swing.*;
import javax.swing.text.NumberFormatter;
import java.awt.*;

public class LevantStatsForm
{
    private final LevantStats levantStats;

    @SuppressWarnings("unused")
    private JPanel pnlLevantStats;
    private JFormattedTextField txtCurrentHP;
    private JFormattedTextField txtMaximumHP;
    private JFormattedTextField txtAttack;
    private JFormattedTextField txtDefense;
    private JFormattedTextField txtMagicAttack;
    private JFormattedTextField txtMagicDefense;
    private JFormattedTextField txtSpeed;

    public LevantStatsForm(LevantStats levantStats)
    {
        this.levantStats = levantStats;
        $$$setupUI$$$();
    }

    private void createUIComponents()
    {
        NumberFormatter hpFormatter = FormatterProvider.getHPFormatter();
        NumberFormatter statsFormatter = FormatterProvider.getStatsFormatter();

        this.txtCurrentHP = new JFormattedTextField(hpFormatter);
        this.txtCurrentHP.setValue(this.levantStats.getCurrentHP());
        this.txtMaximumHP = new JFormattedTextField(hpFormatter);
        this.txtMaximumHP.setValue(this.levantStats.getMaximumHP());
        this.txtAttack = new JFormattedTextField(statsFormatter);
        this.txtAttack.setValue(this.levantStats.getAttack());
        this.txtDefense = new JFormattedTextField(statsFormatter);
        this.txtDefense.setValue(this.levantStats.getDefense());
        this.txtMagicAttack = new JFormattedTextField(statsFormatter);
        this.txtMagicAttack.setValue(this.levantStats.getMagicAttack());
        this.txtMagicDefense = new JFormattedTextField(statsFormatter);
        this.txtMagicDefense.setValue(this.levantStats.getMagicDefense());
        this.txtSpeed = new JFormattedTextField(statsFormatter);
        this.txtSpeed.setValue(this.levantStats.getSpeed());
    }

    public LevantStats getLevantStats()
    {
        this.levantStats.setCurrentHP((Integer) txtCurrentHP.getValue());
        this.levantStats.setMaximumHP((Integer) txtMaximumHP.getValue());
        this.levantStats.setAttack((Short) txtAttack.getValue());
        this.levantStats.setDefense((Short) txtDefense.getValue());
        this.levantStats.setMagicAttack((Short) txtMagicAttack.getValue());
        this.levantStats.setMagicDefense((Short) txtMagicDefense.getValue());
        this.levantStats.setSpeed((Short) txtSpeed.getValue());
        return this.levantStats;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        createUIComponents();
        pnlLevantStats = new JPanel();
        pnlLevantStats.setLayout(new GridLayoutManager(8, 3, new Insets(8, 8, 8, 8), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Attack");
        pnlLevantStats.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Defense");
        pnlLevantStats.add(label2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Magic Attack");
        pnlLevantStats.add(label3, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Magic Defense");
        pnlLevantStats.add(label4, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Speed");
        pnlLevantStats.add(label5, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        pnlLevantStats.add(spacer1, new GridConstraints(0, 2, 7, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        pnlLevantStats.add(spacer2, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Current HP");
        pnlLevantStats.add(label6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Maximum HP");
        pnlLevantStats.add(label7, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pnlLevantStats.add(txtCurrentHP, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pnlLevantStats.add(txtMaximumHP, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pnlLevantStats.add(txtAttack, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pnlLevantStats.add(txtDefense, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pnlLevantStats.add(txtMagicAttack, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pnlLevantStats.add(txtMagicDefense, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        pnlLevantStats.add(txtSpeed, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return pnlLevantStats;
    }
}
